{"version":3,"sources":["components/Dialog.tsx","components/Tags.tsx","components/Question.tsx","Utils.tsx","components/ScrollComponent.tsx","components/MainApp.tsx","service/Service.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["props","useEffect","isOpen","document","getElementById","click","type","id","className","data-toggle","data-target","hidden","role","aria-labelledby","aria-hidden","children","data-dismiss","Tags","tags","map","tag","index","key","Question","timeStamp","question","onClick","title","owner","display_name","creation_date","Date","toDateString","ScrollComponent","trackScrolling","wrappedElement","target","getBoundingClientRect","bottom","window","innerHeight","isLoading","onNext","removeEventListener","addEventListener","MainApp","state","questions","page","loading","questionDialog","selectedQuestion","this","getQuestions","setState","url","fetch","then","response","json","getQuestion","items","loadMore","onQuestionClick","Dialog","href","link","rel","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.11d60cc8.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\n\r\n/**\r\n * Dialog Component\r\n */\r\nexport default (props: any) => {\r\n\r\n    useEffect(() => {\r\n        if (props.isOpen) {\r\n            document.getElementById(\"modal-open-btn\")?.click();\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <button type=\"button\" id=\"modal-open-btn\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModal\" hidden></button>\r\n            <div className=\"modal show\" id=\"exampleModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-body\">\r\n                            {props.children}\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\n\r\n/**\r\n * \r\n * @param param0 Tags: Different technologies tages are shown using this component\r\n */\r\nfunction Tags({ tags }: any) {\r\n    return (\r\n        <div className=\"tags-div\">\r\n            {tags.map((tag:string, index:number) => (\r\n                <div className=\"badge chip\" key={index}>{tag}</div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tags;","import React from \"react\";\r\n\r\nimport Tags from \"./Tags\";\r\nimport { convertToDate } from \"../Utils\";\r\n\r\n/**\r\n * Question Card Component\r\n * @param props Data passed from Parent\r\n */\r\nfunction Question(props: any) {\r\n    \r\n    const question = props.question;\r\n\r\n    return (\r\n        <div className=\"card bg-light mb-3\">\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\" onClick={props.onClick}>{question.title}</h5>\r\n                <hr className=\"mb-0\" />\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 col-md-6\">\r\n                        <Tags tags={question.tags} />\r\n                    </div>\r\n                    <div className=\"col-12 col-md-6 text-right\">\r\n                        <span className=\"question-details\"><i className=\"fa fa-user\"></i>{question.owner.display_name}</span>\r\n                        <span className=\"question-details\"><i className=\"fa fa-clock-o\"></i>{convertToDate(question.creation_date)}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Question;","/**\r\n * Convert the given time stamp in to readable dat time string\r\n * @param timeStamp Time in Timestamp format\r\n */\r\nfunction convertToDate(timeStamp: number) {\r\n    return new Date(timeStamp * 1000).toDateString()\r\n}\r\n\r\nexport {\r\n    convertToDate\r\n}","import { useEffect } from \"react\";\r\n\r\n/**\r\n * Custom infinite scroll Component\r\n * @param props Data passed from parent component\r\n */\r\nconst ScrollComponent = (props: any) => {\r\n\r\n    /**\r\n     * Checks if user reached the bottom of the givedn element\r\n     * @param el Element on which height is to be monitered\r\n     */\r\n    function isBottom(el: any) {\r\n        return el.getBoundingClientRect().bottom <= (window.innerHeight + 1000);\r\n    }\r\n\r\n    /**\r\n     * Called for scrolling event\r\n     */\r\n    function trackScrolling() {\r\n        const wrappedElement = document.getElementById(props.target);\r\n        if (isBottom(wrappedElement) && !props.isLoading) {\r\n            props.onNext();\r\n            document.removeEventListener(\"scroll\", trackScrolling);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"scroll\", trackScrolling);\r\n    });\r\n\r\n    return (props.children);\r\n};\r\n\r\nexport default ScrollComponent;","import React from \"react\";\r\n\r\nimport Dialog from \"./Dialog\";\r\nimport Question from \"./Question\";\r\nimport ScrollComponent from \"./ScrollComponent\";\r\nimport { getQuestion } from \"../service/Service\";\r\n\r\n//State Object is defined Here\r\ninterface state { \r\n    questions: Array<any>, \r\n    page: number, \r\n    loading: boolean, \r\n    questionDialog: boolean,\r\n    selectedQuestion: any \r\n}\r\n\r\nexport default class MainApp extends React.Component<{},state > {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            questions: [],\r\n            page: 1,\r\n            loading: false,\r\n            questionDialog: false,\r\n            selectedQuestion: {\r\n                title: \"\"\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getQuestions(this.state.page);\r\n    }\r\n\r\n    /**\r\n     * The funciton takes page number as input and calls the API to fetch the questions\r\n     * @param page Page Number\r\n     */\r\n    getQuestions(page: number) {\r\n        this.setState({ loading: true })\r\n        getQuestion(page).then(response => {\r\n            this.setState({\r\n                questions: [...this.state.questions, ...response.items],\r\n                loading: false\r\n            });\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Function to load more questions, called at the time of scrolling\r\n     */\r\n    loadMore() {\r\n        this.setState({\r\n            page: this.state.page + 1,\r\n        }, () => {\r\n            this.getQuestions(this.state.page);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Sets the clicked question in state and open the popup\r\n     * @param question Selected Question Object\r\n     */\r\n    onQuestionClick(question: Object) {\r\n        this.setState({\r\n            questionDialog: true,\r\n            selectedQuestion: question\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { questions, loading, selectedQuestion } = this.state;\r\n        return (\r\n            <div className=\"container vh-100\">\r\n                <div className=\"col-12 pt-5 mb-5\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <h2>Stackoverflow Micro App</h2>\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                            <p><strong>Welcome Back!</strong></p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"col-12\">\r\n                    <ScrollComponent target=\"questions-div\" onNext={() => this.loadMore()} isLoading={loading}>\r\n                        <div id=\"questions-div\">\r\n                            {questions.map((question: any, index: number) => (\r\n                                <Question key={index} question={question} onClick={() => this.onQuestionClick(question)} />\r\n                            ))}\r\n                        </div>\r\n                    </ScrollComponent>\r\n                </div>\r\n\r\n                <div hidden={!loading} className=\"col-12\">\r\n                    <i className=\"fa fa-spinner fa-pulse fa-3x fa-fw\"></i>\r\n                </div>\r\n\r\n                <Dialog isOpen={this.state.questionDialog} title={selectedQuestion.title}>\r\n                    <div className=\"row text-left\">\r\n                        <div className=\"col-12\">\r\n                            <h5 className=\"modal-title text-left\" id=\"exampleModalLabel\">{selectedQuestion.title}</h5>\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                            <a title=\"Open in new Tab\" href={selectedQuestion.link} target=\"_blank\" rel=\"noopener noreferrer\">Go To Question <i className=\"fa fa-external-link\"></i></a>\r\n                        </div>\r\n                    </div>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}","const baseURL = \"https://api.stackexchange.com/2.2/search/advanced?order=desc&site=stackoverflow\";\r\n\r\n/**\r\n * API Call for gettgin questions nased on pae number\r\n * @param page PageNumber\r\n */\r\nfunction getQuestion(page: number) {\r\n    const url = `${baseURL}&page=${page}` \r\n    return fetch(url).then(response => response.json());\r\n}\r\n\r\nexport {\r\n    getQuestion\r\n}","import React from \"react\";\n\n//App Stylesheet\nimport \"./App.css\";\n\n//MainApp Component\nimport MainApp from \"./components/MainApp\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n        <MainApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}